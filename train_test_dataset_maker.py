"""
Данная программа автоматически обрабатывает картинки в выбранной папке для дальнейшего использования
в обучении и тестировании нейронной сети колоризации изображений
На вход подается аргумент - путь к папке, в которой хранятся картинки
Второй аргумент - количество изображений из выборки, которые пойдут на выборку тестирования нейронной сети
В этой же папке создастся подпапка с результатом, result
Всем картинкам даст порядковый номер от 1 до N
Картинки обязательно фильтруются и изначально чёрно-белые изображения не допускаются
Картинки перезаписываются в палитре RGB
Импорт библиотек, sys, os, Image (библиотека Pillow)
"""
import sys
import os
from PIL import Image
import random

PATH = sys.argv[1]  # Получаем из аргумента путь к папке, в которой хранится выборка для обучения
TEST_COUNT = int(sys.argv[2])  # Получаем из аргумента количество изображений из перерабатываемой выборки, которые будут
# составлять выборку тестирования
if not os.path.isdir(PATH):  # Если введенного в аргументы пути не существует
    print("Введите существующий путь")  # Выводим информацию, что требуется ввести существующий путь
    exit()  # Завершаем программу
if not TEST_COUNT:
    print("Введите корректное количество картинок для тестирования")  # Выводим информацию, что требуется ввести
    # корректное число картинок для тестируемой выборки
    exit()  # Завершаем программу
RESULT_PATH = PATH + "\\result"  # Путь к подпапке с результатом
RESULT_TRAIN = RESULT_PATH + "\\train"  # Путь к подпапке с обучающей выборкой
RESULT_TEST = RESULT_PATH + "\\test"  # Путь к подпапке с тестирующей выборкой
COLOR_DIR = "\\color"  # Название подпапки, куда будут выкладываться train и test изображения

for path_to_create in (RESULT_PATH, RESULT_TRAIN, RESULT_TEST,
                       RESULT_TRAIN + COLOR_DIR, RESULT_TEST + COLOR_DIR):  # Создаем все объявленные папки, если их
    # не существует
    if not os.path.isdir(path_to_create):
        os.mkdir(path_to_create)
i = 1  # Счетчик
images = list(os.listdir(PATH))  # Преобразование списка файлов в папке в list
random.shuffle(images)  # Перемешивание списка файлов
for file in images:  # Цикл перебора файлов в папке
    if not os.path.isfile(PATH + "\\" + file):  # Если в списке попались не файлы, а папки, пропускаем их
        continue
    image = None  # Переменная изображения
    try:
        image = Image.open(PATH + "\\" + file)  # Создаем объект класса Image, аргумент в конструкторе - путь к файлу,
        # из которого создается изображение
    except:
        print(f'Файл {file} пропущен по ошибке. Возможно, он не является изображением.')  # Выводим информацию, что файл
        # не открылся как изображение
        continue
    image = image.resize((256, 256), Image.LANCZOS)  # Изменяем размер изображения до 480 на 360
    image_colorized = Image.new("RGB", image.size)  # Создаем новое цветное изображение с палитрой RGB того же размера
    is_black_and_white = True  # Индикатор того, что изображение полностью чёрно-белое
    try:  # Проверка на ошибки при работе с пикселями изображения. В основном, это то,
        #  что у изображения изначально не 3 цвета
        for x in range(image.width):  # Перебор пикселей по оси X
            for y in range(image.height):  # Перебор пикселей по оси Y
                pixel = image.getpixel(xy=(x, y))  # Получаем пиксель изображения
                if is_black_and_white:  # Если прошлый пиксель
                    is_black_and_white = pixel[0] == pixel[1] == pixel[2]  # Все параметры (r, g, b) у изображения, если
                    # оно чёрно-белое, должны быть равны
                image_colorized.putpixel(xy=(x, y), value=pixel[:3])  # Устанавливаем значение
                # пикселю цветной картинке
        if is_black_and_white:  # Если изображение после перебора всех его пикселей оказалось полностью
            #  чёрно-белым
            print(f'Изображение {file} является чёрно-белым и не подходит для преобразований.')
            continue  # Продолжаем цикл
        if i <= TEST_COUNT:  # Если счетчик изображений еще не достиг количества картинок на тесты, то
            image_colorized.save(f'{RESULT_TEST + COLOR_DIR}\\{i}.png')  # Сохраняем измененное цветное изображение в
            # папке с выборкой для тестирования с названием - порядковый номер
            print(f'Изображение {file} обработано в выборку для тестирования.')
        else:
            image_colorized.save(f'{RESULT_TRAIN + COLOR_DIR}\\{i}.png')  # Сохраняем измененное цветное изображение в
            # папке с выборкой для обучения с названием - порядковый номер
            print(f'Изображение {file} обработано в выборку для обучения.')
        i += 1  # Прибавляем к счетчику единицу
    except:
        print(f'Изображение {file} пропущено по ошибке.')  # Выводим информацию, что изображение
        # не обработалось по ошибке
print(f'Преобразование успешно выполнено.')  # Завершение операции
