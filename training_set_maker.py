# Данная программа автоматически обрабатывает картинки в выбранной папке для дальнейшего использования
# в обучении или тестировании нейронной сети колоризации изображений
# На вход подается аргумент - путь к папке, в которой хранятся картинки
# В этой же папке создадутся подпапки с результатом, input - чёрнобелые изображения
# output - результат, цветные изображения. Всем картинкам даст порядковый номер от 1 до N
# Картинки обязательно фильтруются и изначально чёрно-белые изображения не допускаются
# Импорт библиотек, sys, os, Image (библиотека Pillow)
import sys
import os
from PIL import Image

PATH = sys.argv[1]  # Получаем из аргумента путь к папке, в которой хранится выборка для обучения
if not os.path.isdir(PATH):  # Если введенного в аргументы пути не существует
    print("Введите существующий путь")  # Выводим информацию, что требуется ввести существующий путь
    exit()  # Завершаем программу
RESULT_PATH = PATH + "\\result"  # Путь к подпапке с результатом
RESULT_PATH_OUTPUT = RESULT_PATH + "\\output"  # Путь к подпапке с выходными данными (цветных изображений)
RESULT_PATH_INPUT = RESULT_PATH + "\\input"  # Путь к подпапке с входными данными (чернобелыми изображениями)

for path_to_create in (RESULT_PATH, RESULT_PATH_OUTPUT, RESULT_PATH_INPUT):  # Создаем все объявленные папки, если их
    # не существует
    if not os.path.isdir(path_to_create):
        os.mkdir(path_to_create)
i = 1  # Счетчик
for file in os.listdir(PATH):  # Цикл перебора файлов в папке
    image = Image.open(PATH + "\\" + file)  # Создаем объект класса Image, аргумент в конструкторе - путь к файлу,
    # из которого создается изображение
    image = image.resize((480, 360), Image.LANCZOS)  # Изменяем размер изображения до 480 на 360
    image_colorized = Image.new("RGB", image.size)  # Создаем новое цветное изображение с палитрой RGB того же размера
    image_decolorized = Image.new("L", image.size)  # Создаем новое изображение с чёрно-белой цветовой палитрой того
    # же размера
    is_black_and_white = True  # Индикатор того, что изображение полностью чёрно-белое
    try:  # Проверка на ошибки при работе с пикселями изображения. В основном, это то,
        #  что у изображения изначально не 3 цвета
        for x in range(image.width):  # Перебор пикселей по оси X
            for y in range(image.height):  # Перебор пикселей по оси Y
                pixel = image.getpixel(xy=(x, y))  # Получаем пиксель изображения
                if is_black_and_white:  # Если прошлый пиксель
                    is_black_and_white = pixel[0] == pixel[1] == pixel[2]  # Все параметры (r, g, b) у изображения, если
                    # оно чёрно-белое, должны быть равны
                max_color = max(pixel[:3])  # Выбираем массив только из r,g,b не учитывая a (прозрачность) и выбираем
                # максимальный компонент по значению
                image_colorized.putpixel(xy=(x, y), value=pixel[:3])  # Устанавливаем значение
                # пикселю цветной картинке
                image_decolorized.putpixel(xy=(x, y), value=max_color)  # Устанавливаем значение пикселю,
                # равное max_color.
                # Напоминаю, что палитра у нового созданного изрбражения состоит из одного параметра (L)
        if is_black_and_white:  # Если изображение после перебора всех его пикселей оказалось полностью
            #  чёрно-белым
            print(f'Изображение {file} является чёрно-белым и не подходит для преобразований.')
            continue  # Продолжаем цикл
        image_colorized.save(f'{RESULT_PATH}\\output\\{i}.png')  # Сохраняем измененное цветное изображение в папке с
        # порядковым номером
        image_decolorized.save(f'{RESULT_PATH}\\input\\{i}.png')  # Сохраняем измененное чёрно-белое изображение
        # в папке с порядковым номером
        print(f'Изображение {file} обработано.')
        i += 1  # Прибавляем к счетчику единицу
    except:
        print(f'Изображение {file} пропущено по ошибке.')  # Выводим информацию, что изображение
        # не обработалось по ошибке
print(f'Преобразование успешно выполнено.')  # Завершение операции
