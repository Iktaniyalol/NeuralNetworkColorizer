"""
Данная программа представляет собой скрипт загрузки модели из файла и ее тестирования
В аргументы запуска скрипта подается путь к тестируемой модели и выборке для теста
"""
import os  # Импорт модуля os для работы с операционной системой
import sys  # Импорт модуля sys для работы с системными параметрами и функциями
import random  # Импорт модуля random для работы с генерацией случайных чисел

import keras  # Импорт модуля keras
from skimage import color  # Импорт модуля color из пакета skimage (Scikit-Image) для работы с цветовыми пространствами
import numpy  # Импорт модуля numpy для работы с массивами
from PIL import Image  # Импорт класса Image из модуля PIL (Python Imaging Library) для работы с изображениями

directory = os.getcwd()  # Получаем текущую рабочую директорию

step_ep = None  # В эту переменную будет записано количество шагов, которые нужно сделать генератору
# перед уходом на следующую эпоху обучения
test_list = None  # Переменная, куда запишется список файлов для тестирования
MODEL_PATH = sys.argv[1]  # Получаем из аргумента путь к модели нейронной сети, которую требуется протестировать
if not os.path.isfile(MODEL_PATH):  # Если файла не существует
    print("Введите существующий путь к файлу модели")  # Выводим информацию, что требуется ввести существующий путь
    exit()  # Завершаем программу
TEST_PATH = sys.argv[2]  # Получаем из аргумента путь к папке, в которой хранится выборка для тестирования
if not os.path.isdir(TEST_PATH):  # Если введенного в аргументы пути не существует
    print("Введите существующий путь")  # Выводим информацию, что требуется ввести существующий путь
    exit()  # Завершаем программу


def normalize_l(in_l):  # Функция нормализации компонента L (яркости)
    # Она нормализирует L, который измеряется от 0 до 100 до (-0.5;0.5)
    return (in_l - 50) / 100


def unnormalize_l(in_l):  # Функция денормализации компонента L (яркости)
    # Она денормализует L из (-0.5;0.5) в значения от 0 до 100
    return in_l * 100 + 50


def normalize_ab(in_ab):  # Функция нормализации компонентов a и b (-128;128) до
    #  (-1;1) диапазона
    return in_ab / 110


def unnormalize_ab(in_ab):  # Функция денормализации компонентов a и b
    #  из (-1;1) в (-128;128)
    return in_ab * 110


# Определяем функцию-генератор, которая будет возвращать набор данных пакетами указанного размера
def generator():
    i = 0
    while True:
        x = []  # Создаем пустой список входных значений
        y = []  # Создаем пустой список выходных значений
        if i == len(test_list):  # Если прошли все изображения в списке, перемешиваем их и начинаем заново
            i = 0
            random.shuffle(test_list)
        img = test_list[i]  # Выбираем изображение по индексу i
        i += 1  # Увеличиваем счетчик изображений
        rgb_image = Image.open(os.path.join(TEST_PATH, img)).resize((256, 256))  # Открываем изображение и изменяем
        # его размер
        lab = color.rgb2lab(rgb_image)  # Преобразуем RGB-изображение в формат Lab*
        norm_l = normalize_l(lab)  # Нормализуем параметр L
        norm_ab = normalize_ab(lab)  # Нормализуем параметры a и b
        x.append(norm_l[:, :, 0])  # Добавляем нормализованный параметр L в список входных значений
        y.append(norm_ab[:, :, 1:])  # Добавляем нормализованные параметры a и b в список выходных значений
        x = numpy.array(x)  # Преобразуем список входных значений в numpy array
        y = numpy.array(y)  # Преобразуем список выходных значений в numpy array
        yield x, y  # Возвращаем пакет нормализованных изображений


model = keras.models.load_model(MODEL_PATH)  # Загрузка модели
model.compile(optimizer="adam", loss="MSE", metrics=["accuracy"])  # Компиляция модели с оптимизатором Adam, функцией
# потерь "MSE" и метрикой "accuracy"
test_list = list(os.listdir(path=TEST_PATH))  # Получение списка файлов в тестовой директории
random.shuffle(test_list)  # Перемешиваем
step_ep = len(test_list)  # Определение количества шагов для оценки

print("Всего найдено", len(test_list), "изображений")  # Вывод информации о количестве найденных изображений
print("Начинаем тестирование...")  # Вывод информации о начале тестирования
model.evaluate(generator(), steps=step_ep)  # Выполнение оценки модели на тестовой выборке, используя генератор данных